#include<iostream>
#include<fstream>
using namespace std;

class QueueException
{
private:
	string str;
public:
	QueueException(string message) : str(message) {}
	string what()
	{
		return str;
	}
};

template <class Item> //класс-шаблон очередь
class Queue {
	struct Element {
		Item inf;
		Element* next;
		Element(Item x) : inf(x), next(0) {}
	};
	Element* head, * tail; // указатели на начало и конец очереди
public:
	Queue() :head(0), tail(0) {}

	bool Empty()
	{ // возвращает тру, если очередь пуста, иначе фолс
		return head == 0;
	}

	Item Get() {
		if (Empty()) // если очередь пуста, то генерируем исключение
		{
			throw QueueException("QueueException: get - queue empty");
		}
		else // иначе извлекаем элемент из головы очереди
		{
			Element* t = head;
			Item i = t->inf;
			head = t->next;
			if (head == NULL)
				tail = NULL;
			delete t;
			return i;
		}
	}

	void Put(Item data)
	{
		// устанавливаем вспомогательный указатель на последний элемент очереди
		Element* t = tail;
		// формируем новый элемент, на который будет указывать тэийл 
		tail = new Element(data);
		// если до этого очередь была пуста, то элемент является и первым, и последним
		// поэтому указатель хэд устанавливаем на этот элемент
		if (!head)
			head = tail;
		else
			t->next = tail;
	}
};

int main()
{
	ifstream in("input.txt");
	ofstream out("output.txt");

	Queue<int> t; // Очередь
	int i; int min = INT_MAX; int max = INT_MIN;
	while (in >> i){
		if (i > max)
			max = i;
		if (i < min)
			min = i;
		if (i == min)
			i = max;
		else if (i == max)
			i = min;
		t.Put(i);
	}
	/*in.close();
	while (in >> i) {
		if (i == min)
			i = max;
		else if (i== max)
			i = min;
		t.Put(i);
	}*/
	/*int min = t.Get(); int max = t.Get();
	while (!t.Empty()) {
		i = t.Get();
		if (i < min)
			min = i;
		if (i > max)
			max = i;
	}
	t.Put(min);
	while (!t.Empty())
	{
		int j = t.Get();
		if (j == max)
			j = min;
		else if (j == min)
			j = max;
		t.Put(j);
	}*/

	// пока очередь не пуста, извлекаем из нее элементы
	while (!t.Empty())
	{
		out << t.Get() << " ";
	}
	out.close();
	return 0;
}
