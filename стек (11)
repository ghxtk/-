#include<iostream>
#include<fstream>
using namespace std;
class Stack
{
	struct Element
	{
		int inf;
		Element* next; // указатель на след эл-т
		Element(int x, Element* p) : inf(x), next(p) {}
	};
	Element* head; // указатель на вершину стека
public:
	Stack() : head(0) // конструктор стека
	{}
	bool Empty() // проверка стека на пустоту
	{
		return head == 0;
	}
	int Pop() // взять элемент из стека
	{
		if (Empty()) // если стек пуст, то ничего не делать
		{
			return 0;
		}
		// Иначе заполняем указатель на вершину стека
		Element* r = head;
		// запоминаем информацию из верхнего элемента
		int i = r->inf;
		// передвигаем указатель стека на следующий от вершины элемент
		head = r->next;
		delete r; // освобождаем память, на которую указывает r
		return i; // возвращаем значение
	}
	void Push(int data) // добавить элемент в стек
	{
		head = new Element(data, head);
	}
	int Top()
	{
		if (Empty()) // если стек пуст, то возвращаем 0
		{
			return 0;
		}
		else // иначе возвращаем информацию из вершины стека
		{
			return head->inf;
		}
	}
};
int main()
{
	int i; int min = INT_MAX; int max = INT_MIN;
	Stack t, t1; // два стека
	ifstream in("input.txt");
	ofstream out("output.txt");
	if (!in) // если не открылся
		cout << "error!";
	else
	{
		while (in >> i) // пока считывается, то добавляется эл-т в стек t и находим мин с мах 
		{
			t.Push(i);
			if (i > max)
				max = i;
			if (i < min)
				min = i;
		}
		in.close();

		while (!t.Empty()) // пока стек не пуст перебираем элементы, меняем мах с мин и записываем в стек t1
		{
			int j = t.Top();
			t.Pop();
			if (j == min)
				j = max;
			else if (j == max)
				j = min;
			t1.Push(j);
		}

		while (!t1.Empty()) { // пока стек не пуст перебираем и выводим
			out << t1.Pop() << " ";
		}
		out.close();
	}
	return 0;
}

125 34 10 89 23 56
