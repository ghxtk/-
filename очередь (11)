#include<iostream>
#include<fstream>
using namespace std;

class QueueException
{
private:
	string str;
public:
	QueueException(string message) : str(message) {}
	string what()
	{
		return str;
	}
};

template <class Item> //класс-шаблон очередь
class Queue {
	struct Element {
		Item inf;
		Element* next;
		Element(Item x) : inf(x), next(0) {}
	};
	Element* head, * tail; // указатели на начало и конец очереди
public:
	Queue() :head(0), tail(0) {}

	bool Empty()
	{ // возвращает тру, если очередь пуста, иначе фолс
		return head == 0;
	}

	Item Get() {
		if (Empty()) // если очередь пуста, то генерируем исключение
		{
			throw QueueException("QueueException: get - queue empty");
		}
		else // иначе извлекаем элемент из головы очереди
		{
			Element* t = head;
			Item i = t->inf;
			head = t->next;
			if (head == NULL)
				tail = NULL;
			delete t;
			return i;
		}
	}

	void Put(Item data)
	{
		// устанавливаем вспомогательный указатель на последний элемент очереди
		Element* t = tail;
		// формируем новый элемент, на который будет указывать тэийл 
		tail = new Element(data);
		// если до этого очередь была пуста, то элемент является и первым, и последним
		// поэтому указатель хэд устанавливаем на этот элемент
		if (!head)
			head = tail;
		else
			t->next = tail;
	}
};

int main()
{
	ifstream in("input.txt");
	ofstream out("output.txt");
	Queue<int> q1, q2;  // очередь
	int n, min = 1e10, max = -1e10;

	while(in >> n){  // пока считывается, то добавляется эл - т в очередь q1 и находим мин с мах
		q1.Put(n);
		if (n < min) {
			min = n;
		}
		if (n > max) {
			max = n;
		}
	}
	while(!q1.Empty()) {  // пока очередь не пустая, то извлекаем из q1 эл-ты в q2 и меняем max с min
		n = q1.Get();
		if (n == max) {
			q2.Put(min);
		}
		else if (n == min) {
			q2.Put(max);
		}
		else q2.Put(n);
	}

	// пока очередь не пуста, извлекаем из нее элементы
	while(!q2.Empty()){
		out << q2.Get() << " ";
	}
	in.close();
	out.close();
	return 0;
}
